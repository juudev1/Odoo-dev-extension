{"version":3,"file":"loader.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AA8BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAIA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAOA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAcA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAOA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AArSA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AA2BA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA4OA;;;;;;ACzSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AADA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AACA;AAwBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAIA;AAAA;AAAA;AAKA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAWA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://odoo_dev/./src/injected/core/extension-core.js","webpack://odoo_dev/webpack/bootstrap","webpack://odoo_dev/webpack/runtime/define property getters","webpack://odoo_dev/webpack/runtime/hasOwnProperty shorthand","webpack://odoo_dev/webpack/runtime/make namespace object","webpack://odoo_dev/./src/injected/index.js"],"sourcesContent":["// src/injected/core/extension-core.js\r\nclass ExtensionCore {\r\n    static #extensionData = null;\r\n    static #initialized = false;\r\n    static #resolveInitPromise = null;\r\n    static #rejectInitPromise = null;\r\n    static #initPromise = null;\r\n    static #timeoutId = null;\r\n    static #isEnabled = true; // Default, will be updated\r\n\r\n    static init() {\r\n        if (this.#initialized) return Promise.resolve(this.#extensionData);\r\n        if (this.#initPromise) return this.#initPromise;\r\n\r\n        this.#initPromise = new Promise((resolve, reject) => {\r\n            this.#resolveInitPromise = resolve;\r\n            this.#rejectInitPromise = reject;\r\n\r\n            this.#timeoutId = setTimeout(() => {\r\n                console.error('[ExtensionCore] Timeout waiting for EXTENSION_INIT message.');\r\n                this.#rejectInitPromise(new Error('Timeout waiting for extension data'));\r\n                window.removeEventListener('message', this.#handleInitMessageWrapper);\r\n            }, 5000);\r\n\r\n            // Use a wrapper function for the event listener so 'this' refers to ExtensionCore\r\n            window.addEventListener('message', this.#handleInitMessageWrapper);\r\n\r\n            console.log('[ExtensionCore] Requesting EXTENSION_INIT data...');\r\n            window.postMessage({ type: 'REQUEST_EXTENSION_INIT' }, '*');\r\n        });\r\n        return this.#initPromise;\r\n    }\r\n\r\n    // Wrapper to ensure 'this' context is correct for static method\r\n    static #handleInitMessageWrapper = (event) => {\r\n        this.#handleInitMessage(event);\r\n    }\r\n\r\n    static #handleInitMessage = (event) => {\r\n        if (event.source === window && event.data && (event.data.type === 'EXTENSION_INIT' || event.data.type === 'EXTENSION_INIT_ERROR')) {\r\n            clearTimeout(this.#timeoutId);\r\n            window.removeEventListener('message', this.#handleInitMessageWrapper);\r\n\r\n            if (event.data.type === 'EXTENSION_INIT_ERROR') {\r\n                console.error('[ExtensionCore] Received EXTENSION_INIT_ERROR:', event.data.error);\r\n                this.#initialized = false; // Mark as not initialized properly\r\n                if (this.#rejectInitPromise) {\r\n                    this.#rejectInitPromise(new Error(event.data.error || 'Failed to initialize extension data'));\r\n                }\r\n            } else {\r\n                console.log('[ExtensionCore] Received EXTENSION_INIT:', event.data.data);\r\n                this.#extensionData = event.data.data;\r\n                this.#isEnabled = this.#extensionData.isEnabled !== false; // Update enabled state\r\n                this.#initialized = true;\r\n                if (this.#resolveInitPromise) {\r\n                    this.#resolveInitPromise(this.#extensionData);\r\n                }\r\n            }\r\n            this.#resolveInitPromise = null;\r\n            this.#rejectInitPromise = null;\r\n        }\r\n    }\r\n\r\n    static getUrl(path = '') {\r\n        if (!this.#initialized) throw new Error('Extension not initialized');\r\n        return `${this.#extensionData.url}${path}`;\r\n    }\r\n\r\n    static get resources() {\r\n        if (!this.#isEnabled) return { templates: [], css: [] }; // Return empty if disabled\r\n        return {\r\n            templates: [\r\n                this.getUrl('src/injected/views/list/list_renderer.xml'),\r\n                this.getUrl('src/injected/views/form/form_view.xml'),\r\n                this.getUrl('src/injected/views/field.xml'),\r\n                this.getUrl('src/injected/views/view_button/view_button.xml'),\r\n                this.getUrl('src/injected/views/custom/sidebar_dev.xml'),\r\n            ],\r\n            css: [\r\n                this.getUrl('src/injected/tooltip/css/tooltip.css'),\r\n                this.getUrl('src/injected/views/custom/sidebar_dev.css'),\r\n            ],\r\n        };\r\n    }\r\n\r\n    static get extensionData() {\r\n        return this.#extensionData;\r\n    }\r\n\r\n    static get isEnabled() {\r\n        // Ensure init has run to get the latest state, but don't block indefinitely if init failed\r\n        if (!this.#initialized && this.#initPromise) {\r\n            console.warn(\"[ExtensionCore] isEnabled accessed before full initialization, relying on default or last known state.\");\r\n        }\r\n        return this.#isEnabled;\r\n    }\r\n\r\n    /**\r\n     * Returns the allowed URLs where the extension can execute\r\n     * @returns {Object} Object containing allowed and excluded URL patterns\r\n     */\r\n    static getAllowedUrls() {\r\n        return {\r\n            // URLs where the extension is allowed to run\r\n            allowedPatterns: [\r\n                \"<all_urls>\" // The extension runs on all URLs by default\r\n            ],\r\n            \r\n            // URLs where the extension is specifically excluded\r\n            excludedPatterns: [\r\n                \"https://*/web/login*\", // Login pages are excluded\r\n                \"https://*/jobs/*\",     // Jobs pages are excluded\r\n                \"http://*/jobs/*\"       // Jobs pages on HTTP are also excluded\r\n            ],\r\n            \r\n            // Specific conditions for Odoo module injection\r\n            odooModuleConditions: {\r\n                // Web module paths (where main Odoo functionality is injected)\r\n                webModulePaths: [\r\n                    \"/web\", // General web interface (backend)\r\n                    \"/odoo\" // Odoo specific paths\r\n                ],\r\n                \r\n                // Excluded web paths (even within /web)\r\n                excludedWebPaths: [\r\n                    \"/web/login\", // Login page\r\n                    \"/web/signup\", // Signup page\r\n                    \"/web/jobs\" // Jobs page\r\n                ],\r\n                \r\n                // Portal/Frontend paths that should be excluded\r\n                portalPaths: [\r\n                    \"/shop\",\r\n                    \"/blog\", \r\n                    \"/event\",\r\n                    \"/slides\",\r\n                    \"/forum\",\r\n                    \"/jobs\",\r\n                    \"/contactus\",\r\n                    \"/aboutus\",\r\n                    \"/page/\",\r\n                    \"/website\",\r\n                    \"/survey\"\r\n                ],\r\n                \r\n                // Additional conditions\r\n                hasFileInput: \"presence of file input elements triggers injection\",\r\n                requiresBackendContext: \"extension only works in Odoo backend context\"\r\n            },\r\n            \r\n            // Method to check if current URL is allowed for extension execution\r\n            isCurrentUrlAllowed: function() {\r\n                const currentUrl = window.location.href;\r\n                const currentPath = window.location.pathname;\r\n                \r\n                // Check if current URL matches excluded patterns\r\n                const isExcluded = this.excludedPatterns.some(pattern => {\r\n                    if (pattern.includes(\"*/web/login*\")) {\r\n                        return currentPath.includes('/web/login');\r\n                    }\r\n                    if (pattern.includes(\"*/jobs/*\")) {\r\n                        return currentPath.includes('/jobs');\r\n                    }\r\n                    return false;\r\n                });\r\n                \r\n                if (isExcluded) {\r\n                    let excludeReason = \"unknown exclusion\";\r\n                    if (currentPath.includes('/web/login')) {\r\n                        excludeReason = \"login page exclusion\";\r\n                    } else if (currentPath.includes('/jobs')) {\r\n                        excludeReason = \"jobs page exclusion\";\r\n                    }\r\n                    \r\n                    return {\r\n                        allowed: false,\r\n                        reason: \"URL matches excluded pattern\",\r\n                        pattern: excludeReason\r\n                    };\r\n                }\r\n                \r\n                // Since we use <all_urls>, extension can run everywhere except excluded\r\n                return {\r\n                    allowed: true,\r\n                    reason: \"URL matches allowed patterns\",\r\n                    pattern: \"<all_urls>\"\r\n                };\r\n            },\r\n            \r\n            // Method to check if current URL should have Odoo modules injected\r\n            shouldInjectOdooModules: function() {\r\n                const currentPath = window.location.pathname;\r\n                const hasFileInput = document.querySelector('input[type=\"file\"]') !== null;\r\n                \r\n                // Check if current path is excluded\r\n                const isExcludedPath = this.odooModuleConditions.excludedWebPaths.some(excludedPath => \r\n                    currentPath.includes(excludedPath)\r\n                );\r\n                \r\n                // Also check for jobs routes (like /jobs/apply/*)\r\n                const isJobsPath = currentPath.includes('/jobs');\r\n                \r\n                // Detect portal/frontend views by checking for common indicators\r\n                const isPortalView = this._detectPortalView();\r\n                \r\n                // Check if it's a backend web module (admin interface)\r\n                const isBackendWebModule = (\r\n                    currentPath.includes('/web') && \r\n                    !isExcludedPath && \r\n                    !isPortalView &&\r\n                    this._isBackendContext()\r\n                );\r\n                \r\n                // Check if it's an Odoo specific path (usually backend)\r\n                const isOdooModule = (\r\n                    currentPath.includes('/odoo') && \r\n                    !isExcludedPath && \r\n                    !isPortalView\r\n                );\r\n                \r\n                const shouldInject = (isBackendWebModule || isOdooModule) && !isJobsPath;\r\n                \r\n                return {\r\n                    shouldInject,\r\n                    reasons: {\r\n                        isBackendWebModule,\r\n                        isOdooModule,\r\n                        hasFileInput,\r\n                        currentPath,\r\n                        isExcludedPath,\r\n                        isJobsPath,\r\n                        isPortalView,\r\n                        excludedPaths: this.odooModuleConditions.excludedWebPaths\r\n                    }\r\n                };\r\n            },\r\n            \r\n            // Helper method to detect if current page is a portal/frontend view\r\n            _detectPortalView: function() {\r\n                const currentPath = window.location.pathname;\r\n                \r\n                // Common portal/frontend paths\r\n                const portalPaths = [\r\n                    '/shop',\r\n                    '/blog',\r\n                    '/event',\r\n                    '/slides',\r\n                    '/forum',\r\n                    '/jobs',\r\n                    '/contactus',\r\n                    '/aboutus',\r\n                    '/page/',\r\n                    '/website',\r\n                    '/survey'\r\n                ];\r\n                \r\n                // Check if path matches portal patterns\r\n                const hasPortalPath = portalPaths.some(path => currentPath.includes(path));\r\n                \r\n                // Check for frontend-specific elements in DOM\r\n                const hasFrontendAssets = document.querySelector('link[href*=\"web.assets_frontend\"]') !== null;\r\n                const hasWebsiteAssets = document.querySelector('link[href*=\"website.assets\"]') !== null;\r\n                \r\n                // Check if we're NOT in the backend by looking for backend-specific elements\r\n                const hasBackendAssets = document.querySelector('link[href*=\"web.assets_backend\"]') !== null;\r\n                const hasWebClient = document.querySelector('.o_web_client') !== null;\r\n                \r\n                return hasPortalPath || (hasFrontendAssets || hasWebsiteAssets) && !hasBackendAssets;\r\n            },\r\n            \r\n            // Helper method to detect backend context\r\n            _isBackendContext: function() {\r\n                // Look for backend-specific indicators\r\n                const hasBackendAssets = document.querySelector('link[href*=\"web.assets_backend\"]') !== null;\r\n                const hasWebClient = document.querySelector('.o_web_client') !== null;\r\n                const hasActionManager = document.querySelector('.o_action_manager') !== null;\r\n                const hasControlPanel = document.querySelector('.o_control_panel') !== null;\r\n                \r\n                // Check URL patterns that typically indicate backend\r\n                const currentPath = window.location.pathname;\r\n                const backendPatterns = [\r\n                    '/web#',\r\n                    '/web?',\r\n                    '/web/database',\r\n                    '/web/webclient'\r\n                ];\r\n                \r\n                const hasBackendUrl = backendPatterns.some(pattern => \r\n                    currentPath.includes(pattern) || window.location.href.includes(pattern)\r\n                );\r\n                \r\n                return hasBackendAssets || hasWebClient || hasActionManager || hasControlPanel || hasBackendUrl;\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default ExtensionCore;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// src/injected/index.js\r\nimport ExtensionCore from './core/extension-core.js';\r\n\r\nasync function waitForOdooReady(timeout = 15000) { // Wait up to 15 seconds\r\n    return new Promise((resolve, reject) => {\r\n        const startTime = Date.now();\r\n        const interval = setInterval(() => {\r\n            if (typeof odoo !== 'undefined' && typeof odoo.define === 'function' && odoo.runtime && odoo.runtime.app && odoo.runtime.app.env) {\r\n                clearInterval(interval);\r\n                console.log('[Odoo Dev Index] Odoo environment appears ready.');\r\n                resolve();\r\n            } else if (Date.now() - startTime > timeout) {\r\n                clearInterval(interval);\r\n                console.warn('[Odoo Dev Index] Timeout waiting for Odoo to be ready. Extension might not work correctly.');\r\n                reject(new Error('Timeout waiting for Odoo ready state.'));\r\n            } else if (typeof odoo !== 'undefined' && typeof odoo.define === 'function' && (!odoo.runtime || !odoo.runtime.app)) {\r\n                console.log('[Odoo Dev Index] Odoo define is ready, but odoo.runtime.app not yet...');\r\n            }\r\n\r\n        }, 200); // Check every 200ms\r\n    });\r\n}\r\n\r\nasync function initializeOdooDev() {\r\n    \"use strict\";\r\n\r\n    try {\r\n        // 0. Early check to avoid loading in inappropriate contexts\r\n        console.log(\"[Odoo Dev Index] Performing early context validation...\");\r\n        const earlyUrlCheck = ExtensionCore.getAllowedUrls();\r\n        const earlyInjectionCheck = earlyUrlCheck.shouldInjectOdooModules();\r\n        \r\n        if (!earlyInjectionCheck.shouldInject) {\r\n            console.log(\"[Odoo Dev Index] Early validation failed - skipping initialization\");\r\n            console.log(\"[Odoo Dev Index] Early rejection reasons:\", earlyInjectionCheck.reasons);\r\n            return; // Exit early without initializing anything\r\n        }\r\n        \r\n        // 1. Initialize ExtensionCore to get basic data (URL, etc.)\r\n        console.log(\"[Odoo Dev Index] Initializing ExtensionCore...\");\r\n        await ExtensionCore.init();\r\n        window.ExtensionCore = ExtensionCore; // Make it globally available\r\n        console.log(\"[Odoo Dev Index] ExtensionCore initialized. Extension Enabled:\", ExtensionCore.isEnabled);\r\n\r\n        if (!ExtensionCore.isEnabled) {\r\n            console.log(\"[Odoo Dev Index] Extension is disabled by configuration. Halting Odoo module injections.\");\r\n            // Any previously injected elements/patches from a prior enabled state\r\n            // will be gone due to the page reload forced by contentScriptIsolated.js.\r\n            return;\r\n        }\r\n\r\n        const extensionUrl = ExtensionCore.getUrl();\r\n        const srcFolder = extensionUrl + \"src/injected/\";\r\n\r\n        // Create a script global with the URL of the extension\r\n        const globalUrlScript = document.createElement(\"script\");\r\n        globalUrlScript.textContent = `window.__devExtensionUrl = \"${extensionUrl}\";`;\r\n        document.head.appendChild(globalUrlScript);\r\n\r\n        // Function to dynamically load scripts\r\n        function loadScript(path) {\r\n            const url = new URL(path, srcFolder);\r\n            console.log(\"[Odoo Dev Index] Requesting script:\", path);\r\n            return new Promise((resolve, reject) => {\r\n                let script = document.createElement(\"script\");\r\n                script.src = url.href;\r\n                script.type = \"module\"; // Assuming all are modules\r\n                script.onload = () => {\r\n                    console.log(\"[Odoo Dev Index] Loaded script:\", path);\r\n                    resolve(path);\r\n                };\r\n                script.onerror = (err) => {\r\n                    const errorMsg = `Failed to load script: ${path} from ${url.href}`;\r\n                    console.error(\"[Odoo Dev Index]\", errorMsg, err);\r\n                    reject(new Error(errorMsg));\r\n                };\r\n                document.head.appendChild(script);\r\n            });\r\n        }\r\n\r\n        // Check if we should inject modules\r\n        const urlCheck = ExtensionCore.getAllowedUrls();\r\n        const injectionCheck = urlCheck.shouldInjectOdooModules();\r\n        \r\n        console.log(\"[Odoo Dev Index] URL analysis:\", {\r\n            currentUrl: window.location.href,\r\n            isAllowed: urlCheck.isCurrentUrlAllowed(),\r\n            shouldInject: injectionCheck\r\n        });\r\n\r\n        if (injectionCheck.shouldInject) {\r\n            console.log(\"[Odoo Dev Index] Conditions met, injecting Odoo modules...\");\r\n            console.log(\"[Odoo Dev Index] Injection reasons:\", injectionCheck.reasons);\r\n            \r\n            // Additional safety check: ensure we're in a valid Odoo backend context\r\n            if (injectionCheck.reasons.isPortalView) {\r\n                console.warn(\"[Odoo Dev Index] Portal view detected - aborting injection to prevent template errors\");\r\n                return;\r\n            }\r\n\r\n            // 2. Load odoo_version_utils.js (needed by bundle_xml.js)\r\n            // This defines 'odoo_dev.version_utils'\r\n            await loadScript(\"./utils/odoo_version_utils.js\");\r\n\r\n            // 3. Load bundle_xml.js (defines 'odoo_dev.bundle.xml' and how to load templates)\r\n            // This module itself requires 'odoo_dev.version_utils'\r\n            await loadScript(\"./templates/bundle_xml.js\");\r\n\r\n            // 4. Load client.js. This script file contains an odoo.define that\r\n            //    will internally load templates using 'odoo_dev.bundle.xml'.\r\n            //    It also sets up `window.odooDevClientReadyPromise`.\r\n            await loadScript(\"./core/client.js\");\r\n\r\n            // 5. IMPORTANT: Wait for client.js's *internal* async operations (template loading) to complete.\r\n            console.log(\"[Odoo Dev Index] Waiting for client.js internal initialization (template/CSS loading)...\");\r\n            if (window.odooDevClientReadyPromise) {\r\n                await window.odooDevClientReadyPromise;\r\n                console.log(\"[Odoo Dev Index] client.js has finished its internal initialization.\");\r\n            } else {\r\n                // This should not happen if client.js is structured correctly\r\n                console.warn(\"[Odoo Dev Index] window.odooDevClientReadyPromise was not set by client.js. Proceeding, but templates might not be ready.\");\r\n            }\r\n\r\n            // 6. Now that templates are loaded, load all other scripts.\r\n            console.log(\"[Odoo Dev Index] Loading remaining UI components and patches...\");\r\n            const remainingScripts = [\r\n                // ExtensionCore is already an ES Module import, no need to loadScript it.\r\n                // bundle_xml.js and client.js already loaded.\r\n                // odoo_version_utils.js already loaded.\r\n\r\n                // ****** Services ******\r\n                \"./tooltip/js/dev_info_service.js\",\r\n                \"./services/active_record.js\",\r\n\r\n                // ****** Components ******\r\n                \"./views/custom/field_xpath.js\",\r\n\r\n                \"./views/custom/sidebar_dev.js\", // Antes que el form_controller.js para que se actualice el resModel\r\n                \"./views/form/form_controller.js\",\r\n                \"./views/list/list_controller.js\",\r\n                // ****** Webclient Patches ******\r\n                \"./webclient.js\",\r\n\r\n                \"./tooltip/js/tooltip.js\",\r\n\r\n                \"./views/form/form_compiler.js\",\r\n                \"./views/list/list_renderer.js\",\r\n                \"./views/view_button/view_button.js\",\r\n                \"./views/field.js\",\r\n                \"./form_label.js\"\r\n            ];\r\n\r\n            // Load remaining scripts in parallel\r\n            await Promise.all(remainingScripts.map(scriptPath => loadScript(scriptPath)\r\n                .catch(err => {\r\n                    // Log individual script load errors but don't necessarily stop all others\r\n                    console.error(`[Odoo Dev Index] Non-critical error loading script: ${err.message}. Some features might be affected.`);\r\n                })\r\n            ));\r\n\r\n            console.log(\"[Odoo Dev Index] All specified injected scripts have been processed.\");\r\n\r\n        } else {\r\n            console.log(\"[Odoo Dev Index] Conditions not met, no Odoo modules injected.\");\r\n            console.log(\"[Odoo Dev Index] Rejection reasons:\", injectionCheck.reasons);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"[Odoo Dev Index] Critical error during extension initialization:\", error);\r\n    }\r\n}\r\n\r\n(async () => {\r\n    // The `REQUEST_EXTENSION_INIT` message will be sent by ExtensionCore.init()\r\n    // The response `EXTENSION_INIT` will be handled by ExtensionCore.init()'s promise.\r\n    // Then initializeOdooDev will run.\r\n    await initializeOdooDev();\r\n})();"],"names":[],"sourceRoot":""}