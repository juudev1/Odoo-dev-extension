{"version":3,"file":"contentScript.bundle.js","mappings":"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","sources":["webpack://odoo_dev/./src/extension/contentScriptIsolated.js"],"sourcesContent":["// src/extension/contentScriptIsolated.js\r\n\r\n// --- Constants for Storage Keys ---\r\nconst EXTENSION_ENABLED_KEY = 'odooDevExtensionEnabled';\r\nconst BACKGROUND_ENABLED_KEY = 'odooDevEnableBackground';\r\nconst IMAGE_STORAGE_KEY = 'odoo_bg'; // Assuming this is your key for the image data URL\r\n\r\n// --- Module-level State ---\r\nlet extensionInitData = null; // Cached data: { id, url, version, backgroundImg, isEnabled, isBackgroundEnabled }\r\nlet isDataReady = false;      // Flag to indicate if extensionInitData is populated\r\n\r\n/**\r\n * Fetches all relevant extension states from chrome.storage.local.\r\n * @returns {Promise<object>} A promise that resolves to an object containing isEnabled and isBackgroundEnabled states.\r\n */\r\nasync function getStatesFromStorage() {\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.get([EXTENSION_ENABLED_KEY, BACKGROUND_ENABLED_KEY], (result) => {\r\n            if (chrome.runtime.lastError) {\r\n                console.error(\"[Isolated Script] Storage Error getting states:\", chrome.runtime.lastError.message);\r\n                // Default to true for both if storage fails, to ensure features are on by default on error\r\n                resolve({ isEnabled: true, isBackgroundEnabled: true });\r\n                return;\r\n            }\r\n            resolve({\r\n                isEnabled: result[EXTENSION_ENABLED_KEY] !== false,         // Default to true if undefined\r\n                isBackgroundEnabled: result[BACKGROUND_ENABLED_KEY] !== false // Default to true if undefined\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Fetches the stored background image (as a data URL).\r\n * @returns {Promise<string|null>} A promise that resolves to the image data URL or null.\r\n */\r\nasync function getStoredBackgroundImage() {\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.get([IMAGE_STORAGE_KEY], (result) => {\r\n            if (chrome.runtime.lastError) {\r\n                console.error(\"[Isolated Script] Storage Error getting background image:\", chrome.runtime.lastError.message);\r\n                resolve(null);\r\n                return;\r\n            }\r\n            resolve(result[IMAGE_STORAGE_KEY] || null); // Return null if not set\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Prepares the initial data for the extension, including states from storage and manifest details.\r\n * This function populates/updates `extensionInitData`.\r\n * @param {boolean} forceRefresh - If true, re-fetches states and image from storage even if data is already \"ready\".\r\n * @returns {Promise<object|null>} The prepared extension data object, or null on critical error.\r\n */\r\nasync function prepareExtensionData(forceRefresh = false) {\r\n    if (isDataReady && !forceRefresh) {\r\n        return extensionInitData;\r\n    }\r\n\r\n    // console.log(`[Isolated Script] Preparing extension data. Force refresh: ${forceRefresh}`);\r\n    try {\r\n        const states = await getStatesFromStorage(); // Always get the latest states\r\n        const storedImage = await getStoredBackgroundImage(); // Get the latest image\r\n        const manifest = chrome.runtime.getManifest();\r\n\r\n        extensionInitData = {\r\n            id: chrome.runtime.id,\r\n            url: chrome.runtime.getURL(''),\r\n            version: manifest.version,\r\n            backgroundImg: storedImage,           // Current stored image\r\n            isEnabled: states.isEnabled,          // Current main extension enabled state\r\n            isBackgroundEnabled: states.isBackgroundEnabled // Current background enabled state\r\n        };\r\n        isDataReady = true; // Mark data as ready (or re-validated)\r\n        // console.log('[Isolated Script] Extension data prepared successfully:', extensionInitData);\r\n        return extensionInitData;\r\n    } catch (error) {\r\n        console.error('[Isolated Script] Critical error preparing extension data:', error);\r\n        isDataReady = false; // Mark as not ready if there was an error\r\n        extensionInitData = null; // Clear potentially stale data\r\n        return null; // Indicate failure\r\n    }\r\n}\r\n\r\n/**\r\n * Sends the current `extensionInitData` to the MAIN world via postMessage.\r\n * @param {boolean} forceDataRefresh - If true, calls prepareExtensionData with forceRefresh=true before sending.\r\n */\r\nasync function sendInitDataToMainWorld(forceDataRefresh = false) {\r\n    const dataToSend = await prepareExtensionData(forceDataRefresh); // Ensures data is up-to-date if forced\r\n\r\n    if (dataToSend) {\r\n        console.log('[Isolated Script] Sending EXTENSION_INIT to MAIN world. Data:', JSON.stringify(dataToSend));\r\n        window.postMessage({\r\n            type: 'EXTENSION_INIT',\r\n            data: dataToSend\r\n        }, '*'); // Target '*' is okay for same-window communication to MAIN world\r\n    } else {\r\n        console.error('[Isolated Script] Cannot send EXTENSION_INIT to MAIN world because data preparation failed.');\r\n        window.postMessage({\r\n            type: 'EXTENSION_INIT_ERROR',\r\n            error: 'Failed to prepare extension data in isolated world.'\r\n        }, '*');\r\n    }\r\n}\r\n\r\n// --- Event Listeners ---\r\n\r\n// Listen for requests from the MAIN world (e.g., ExtensionCore.init())\r\nwindow.addEventListener('message', async (event) => {\r\n    // Basic security: ensure the message is from the current window and has the expected structure\r\n    if (event.source === window && event.data && event.data.type === 'REQUEST_EXTENSION_INIT') {\r\n        // console.log('[Isolated Script] Received REQUEST_EXTENSION_INIT from MAIN world.');\r\n        // When MAIN world requests data, prepare it (if not ready) and send it.\r\n        // Don't force refresh here; let the initial prepareExtensionData() call handle the first load.\r\n        await sendInitDataToMainWorld();\r\n    }\r\n});\r\n\r\n// Listen for messages from the popup (e.g., toggle changes)\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    console.log('[Isolated Script] Received message from runtime:', request);\r\n\r\n    if (request.type === 'ODEV_EXTENSION_STATE_CHANGED') {\r\n        console.log('[Isolated Script] Main extension state changed by popup. New intended state:', request.enabled);\r\n        // The popup has already updated chrome.storage.local for EXTENSION_ENABLED_KEY.\r\n        // The strategy is to reload the page. On reload, prepareExtensionData will fetch the new state.\r\n        console.log('[Isolated Script] Forcing page reload to apply main extension state change.');\r\n        sendResponse({ status: \"reloading_page_due_to_main_state_change\" }); // Acknowledge before reload\r\n        window.location.reload();\r\n        // Return true because reload is happening, but the function technically \"handles\" the message.\r\n        // The port will close due to reload anyway.\r\n        return true;\r\n    } else if (request.type === 'ODEV_BACKGROUND_STATE_CHANGED') {\r\n        console.log('[Isolated Script] Background enabled state changed by popup. New state:', request.backgroundEnabled);\r\n        // The popup has already updated chrome.storage.local for BACKGROUND_ENABLED_KEY.\r\n        // We need to:\r\n        // 1. Re-prepare extensionInitData to include this new `isBackgroundEnabled` state (and potentially new isEnabled state).\r\n        // 2. Send this updated data to the MAIN world so it can react (e.g., client.js removing/adding background style).\r\n        // NO PAGE RELOAD for this specific change.\r\n\r\n        // Force prepareExtensionData to re-fetch all states from storage to ensure consistency\r\n        sendInitDataToMainWorld(true) // Pass `true` to force data refresh\r\n            .then(() => {\r\n                console.log(\"[Isolated Script] Successfully resent init data to main world after background state change.\");\r\n                sendResponse({ status: \"background_state_updated_and_resent_to_main\" });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"[Isolated Script] Error sending init data to main world after background state change:\", error);\r\n                sendResponse({ status: \"error_updating_main_world_for_background\", error: error.message });\r\n            });\r\n        return true; // IMPORTANT: Indicate that sendResponse will be called asynchronously.\r\n    }\r\n\r\n    // If the message type isn't handled above, and you don't intend to send a response,\r\n    // it's good practice to either return `false` or not return anything explicitly (undefined).\r\n    // This signals to Chrome that the message port can be closed for this listener.\r\n    // console.log(\"[Isolated Script] Unhandled message type:\", request.type);\r\n    // sendResponse({ status: \"unknown_message_type\" }); // Optional: if you want to always respond\r\n    return false; // Or simply don't return if no other branches handle it.\r\n});\r\n\r\n\r\n// --- Initial Execution ---\r\n// Prepare the extension data when the content script is first injected.\r\n// This ensures that `extensionInitData` (including initial states from storage)\r\n// is populated and ready when the MAIN world sends `REQUEST_EXTENSION_INIT`.\r\nprepareExtensionData()\r\n    .then(initialData => {\r\n        if (initialData) {\r\n            // console.log(\"[Isolated Script] Initial data preparation complete on load.\", initialData);\r\n        } else {\r\n            console.error(\"[Isolated Script] Initial data preparation failed on load.\");\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error(\"[Isolated Script] Error during initial data preparation on load:\", error);\r\n    });"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","EXTENSION_ENABLED_KEY","BACKGROUND_ENABLED_KEY","IMAGE_STORAGE_KEY","extensionInitData","isDataReady","getStatesFromStorage","_getStatesFromStorage","_callee2","_context2","chrome","storage","local","get","result","runtime","lastError","console","error","message","isEnabled","isBackgroundEnabled","getStoredBackgroundImage","_getStoredBackgroundImage","_callee3","_context3","prepareExtensionData","_prepareExtensionData","_callee4","forceRefresh","states","storedImage","manifest","_args4","_context4","undefined","getManifest","id","url","getURL","version","backgroundImg","t0","sendInitDataToMainWorld","_sendInitDataToMainWorld","_callee5","forceDataRefresh","dataToSend","_args5","_context5","log","JSON","stringify","window","postMessage","data","addEventListener","_ref","_callee","event","_context","source","_x","onMessage","addListener","request","sender","sendResponse","enabled","status","location","reload","backgroundEnabled","initialData"],"sourceRoot":""}